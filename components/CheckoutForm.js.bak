'use client';

import React, { useState, useEffect, useCallback, useTransition } from 'react';
import validator from 'validator';
import DOMPurify from 'dompurify';
import { getSurtaxPercent } from '@/actions/getSurtaxPercent';

const renderInput = (id, name, label, errors, form, handleChange, type = 'text', required = true) => (
  <div className="mb-4">
    <label htmlFor={id} className="block text-sm font-medium text-gray-300 mb-1">{label}</label>
    <input
      type={type}
      id={id}
      name={name}
      className={`w-full p-2 text-sm tertiary_bg_color text-gray-300 border ${errors[name] ? 'border-red-500' : 'border-gray-300'
        } rounded-lg`}
      value={form[name] || ''}
      onChange={handleChange}
      required={required}
      autoComplete={name === 'email' ? 'off' : 'on'}
      autoCorrect="off"
      spellCheck={name === 'email' ? 'false' : 'true'}
      placeholder={name === 'name' ? 'Full Name or Registered Business Name' : undefined}
      maxLength={
        name === 'billingState' || name === 'shippingState' ? 2 :
          name === 'billingZipCode' || name === 'shippingZipCode' ? 5 : undefined
      }
    />
    {errors[name] && <p className="text-red-500 text-xs mt-1">{errors[name]}</p>}
  </div>
);

export default function CheckoutForm({ preTaxSubtotal, children }) {
  // Validate and default preTaxSubtotal prop
  const validatedPreTaxSubtotal = typeof preTaxSubtotal === 'number' && !isNaN(preTaxSubtotal) ? preTaxSubtotal : 0;
  if (validatedPreTaxSubtotal !== preTaxSubtotal) {
    console.warn('Invalid preTaxSubtotal prop, defaulting to 0:', preTaxSubtotal);
  }

  const [form, setForm] = useState({
    name: '',
    email: '',
    phone: '',
    billingAddressOne: '',
    billingAddressTwo: '',
    billingCity: '',
    billingState: '',
    billingZipCode: '',
    shippingAddressOne: '',
    shippingAddressTwo: '',
    shippingCity: '',
    shippingState: '',
    shippingZipCode: '',
  });

  const [errors, setErrors] = useState({});
  const [differentShippingInformation, setDifferentShippingInformation] = useState(false);
  const [taxRate, setTaxRate] = useState({ surtax: 0.0, error: null, finalMultiplier: 1.0 });
  const [isPending, startTransition] = useTransition();
  const [submissionStatus, setSubmissionStatus] = useState(null);

  const fetchTaxRate = useCallback(async () => {
    const zipCode = differentShippingInformation ? form.shippingZipCode : form.billingZipCode;
    if (zipCode && validator.isPostalCode(zipCode, 'US')) {
      try {
        const result = await getSurtaxPercent(zipCode);
        setTaxRate(result);
      } catch (error) {
        console.error('Tax rate fetch error:', error);
        setTaxRate({ surtax: 0.0, error: 'Failed to fetch tax rate', finalMultiplier: 1.0 });
      }
    } else {
      setTaxRate({ surtax: 0.0, error: 'Invalid or missing zip code', finalMultiplier: 1.0 });
    }
  }, [form.billingZipCode, form.shippingZipCode, differentShippingInformation]);

  useEffect(() => {
    fetchTaxRate();
  }, [fetchTaxRate]);

  const validateField = useCallback((name, value) => {
    const newErrors = {};
    switch (name) {
      case 'name':
        if (!validator.isLength(value, { min: 2 })) newErrors[name] = 'Name must be at least 2 characters';
        else if (!validator.matches(value, /^[a-zA-Z0-9\s\-\.\'\,\&\(\)éñáíóúüçÉÑÁÍÓÚÜÇ#]+$/))
          newErrors[name] = 'Invalid name format';
        break;
      case 'email':
        if (!validator.isEmail(value)) newErrors[name] = 'Invalid email address';
        break;
      case 'phone':
        if (!validator.isMobilePhone(value, 'any')) newErrors[name] = 'Invalid phone number';
        break;
      case 'billingAddressOne':
      case 'shippingAddressOne':
        if (!validator.isLength(value, { min: 5 })) newErrors[name] = 'Address must be at least 5 characters';
        break;
      case 'billingAddressTwo':
      case 'shippingAddressTwo':
        if (value && !validator.isLength(value, { min: 1 })) newErrors[name] = 'Address line 2 is invalid';
        break;
      case 'billingCity':
      case 'shippingCity':
        if (!validator.isLength(value, { min: 2 })) newErrors[name] = 'City must be at least 2 characters';
        break;
      case 'billingState':
      case 'shippingState':
        if (!validator.isLength(value, { min: 2, max: 2 })) newErrors[name] = 'State must be a 2-letter code';
        else if (!validator.isAlpha(value)) newErrors[name] = 'State must contain only letters';
        break;
      case 'billingZipCode':
      case 'shippingZipCode':
        if (!validator.isPostalCode(value, 'US') || value.length > 5) newErrors[name] = 'Invalid US zip code (5 digits only)';
        break;
    }
    return newErrors[name] || '';
  }, []);

  const handleChange = useCallback((e) => {
    const { name, value } = e.target;
    let sanitizedValue = value;

    switch (name) {
      case 'name': sanitizedValue = value; break;
      case 'email': sanitizedValue = value; break;
      case 'phone': sanitizedValue = value.replace(/[\s-()]/g, ''); break;
      case 'billingAddressOne':
      case 'billingAddressTwo':
      case 'shippingAddressOne':
      case 'shippingAddressTwo':
        sanitizedValue = DOMPurify.sanitize(value); break;
      case 'billingCity':
      case 'shippingCity':
        sanitizedValue = validator.trim(value); break;
      case 'billingState':
      case 'shippingState':
        sanitizedValue = validator.trim(value).toUpperCase(); break;
      case 'billingZipCode':
      case 'shippingZipCode':
        sanitizedValue = validator.trim(value).slice(0, 5); break;
    }

    setForm(prev => {
      const updatedForm = { ...prev, [name]: sanitizedValue };
      if (!differentShippingInformation && (name.startsWith('billingAddress') || ['billingCity', 'billingState', 'billingZipCode'].includes(name))) {
        const shippingField = name.replace('billing', 'shipping');
        updatedForm[shippingField] = sanitizedValue;
      }
      return updatedForm;
    });

    const error = validateField(name, sanitizedValue);
    setErrors(prev => ({ ...prev, [name]: error }));
  }, [differentShippingInformation, validateField]);

  const handleSubmit = async (formData) => {
    startTransition(async () => {
      const formValues = Object.fromEntries(formData);
      console.log('Form Data:', formValues);
      try {
        const result = await createOrder(formData);
        if (result.success) {
          setSubmissionStatus({ success: true, order: result.order });
        } else {
          setSubmissionStatus({ error: result.error });
        }
      } catch (error) {
        setSubmissionStatus({ error: 'Submission failed' });
        console.error('Submission error:', error);
      }
    });
  };

  return (
    <form action={handleSubmit}>
      <div className="container mx-auto p-4">
        <div className="flex flex-col gap-8">
          <div className="secondary_bg_color md:w-[45%] md:mx-auto p-6 rounded-lg border border-gray-100 shadow-md space-y-6">
            <h2 className="text-2xl font-bold text-gray-300 mb-4">Billing Details</h2>
            {renderInput('name', 'name', 'Billing Name or Business', errors, form, handleChange)}
            {renderInput('email', 'email', 'Email Address', errors, form, handleChange, 'email')}
            {renderInput('phone', 'phone', 'Phone Number', errors, form, handleChange)}
            {renderInput('billingAddressOne', 'billingAddressOne', 'Billing Address Line One', errors, form, handleChange)}
            {renderInput('billingAddressTwo', 'billingAddressTwo', 'Billing Address Line Two', errors, form, handleChange, 'text', false)}
            {renderInput('billingCity', 'billingCity', 'Billing City', errors, form, handleChange)}
            {renderInput('billingState', 'billingState', 'Billing State', errors, form, handleChange)}
            {renderInput('billingZipCode', 'billingZipCode', 'Billing Zip Code', errors, form, handleChange)}

            <div className="shipping_and_billing_differentiation flex items-center space-x-2 mt-4">
              <input
                type="checkbox"
                id="differentShippingInformation"
                name="differentShippingInformation"
                checked={differentShippingInformation}
                onChange={() => setDifferentShippingInformation(prev => !prev)}
                className="h-4 w-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500"
              />
              <label htmlFor="differentShippingInformation" className="text-sm text-gray-300">
                Check here if your shipping address differs from your billing address information.
              </label>
            </div>

            {differentShippingInformation && (
              <div id="shippingDetails" className="space-y-6 pt-3 pb-6">
                <h2 className="text-2xl font-bold text-gray-300 mb-4">Shipping Details</h2>
                {renderInput('shippingAddressOne', 'shippingAddressOne', 'Shipping Address Line One', errors, form, handleChange)}
                {renderInput('shippingAddressTwo', 'shippingAddressTwo', 'Shipping Address Line Two', errors, form, handleChange, 'text', false)}
                {renderInput('shippingCity', 'shippingCity', 'Shipping City', errors, form, handleChange)}
                {renderInput('shippingState', 'shippingState', 'Shipping State', errors, form, handleChange)}
                {renderInput('shippingZipCode', 'shippingZipCode', 'Shipping Zip Code', errors, form, handleChange)}
              </div>
            )}

            <div className="purchase_order_summary">
              <h3 className="text-lg font-semibold text-gray-300 mb-4">Your Purchase Details:</h3>
              <div className="outputBillingAddress">
                <p className="text-sm text-gray-300 mt-4">
                  <strong>Billing Address:</strong><br />
                  {form.billingAddressOne && `${form.billingAddressOne}<br />`}
                  {form.billingAddressTwo && `${form.billingAddressTwo}<br />`}
                  {form.billingCity && form.billingState && `${form.billingCity}, ${form.billingState} ${form.billingZipCode}<br />`}
                </p>
              </div>
              <div className="outputShippingAddress">
                <p className="text-sm text-gray-300 mt-4">
                  <strong>Shipping Address:</strong><br />
                  {form.shippingAddressOne && `${form.shippingAddressOne}<br />`}
                  {form.shippingAddressTwo && `${form.shippingAddressTwo}<br />`}
                  {form.shippingCity && form.shippingState && `${form.shippingCity}, ${form.shippingState} ${form.shippingZipCode}<br />`}
                </p>
              </div>
              <div className="taxRate">
                <p className="text-sm text-gray-300 mt-4">
                  <strong>Pre-Tax Subtotal:</strong> ${validatedPreTaxSubtotal.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
                </p>
                <p className="text-sm text-gray-300 mt-4">
                  <strong>State Tax (6%):</strong> ${(validatedPreTaxSubtotal * 0.06).toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
                </p>
                <p className="text-sm text-gray-300 mt-4">
                  <strong>Surtax:</strong> {taxRate.error || (validatedPreTaxSubtotal * taxRate.surtax).toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
                </p>
                <p className="text-sm text-gray-300 mt-4">
                  <strong>Total:</strong> ${(validatedPreTaxSubtotal * taxRate.finalMultiplier).toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
                </p>
              </div>
              <input type="hidden" name="preTaxSubtotal" value={validatedPreTaxSubtotal} />
              <input type="hidden" name="stateTax" value={validatedPreTaxSubtotal * 0.06} />
              <input type="hidden" name="surtax" value={validatedPreTaxSubtotal * taxRate.surtax} />
              <input type="hidden" name="total" value={validatedPreTaxSubtotal * taxRate.finalMultiplier} />
              <input type="hidden" name="taxRate" value={taxRate.finalMultiplier} />
              <input type="hidden" name="purchasedItems" value={JSON.stringify({})} /> {/* Replace with actual cart data */}
              <input type="hidden" name="taxExemptionStatus" value="false" />
              <input type="hidden" name="shippingName" value={differentShippingInformation ? (form.shippingName || '') : (form.name || '')} />
              <input type="hidden" name="shippingAddressOne" value={differentShippingInformation ? (form.shippingAddressOne || '') : (form.billingAddressOne || '')} />
              <input type="hidden" name="shippingAddressTwo" value={differentShippingInformation ? (form.shippingAddressTwo || '') : (form.billingAddressTwo || '')} />
              <input type="hidden" name="shippingCity" value={differentShippingInformation ? (form.shippingCity || '') : (form.billingCity || '')} />
              <input type="hidden" name="shippingState" value={differentShippingInformation ? (form.shippingState || '') : (form.billingState || '')} />
              <input type="hidden" name="shippingZipCode" value={differentShippingInformation ? (form.shippingZipCode || '') : (form.billingZipCode || '')} />
            </div>

            {children}

            <button
              type="submit"
              className="mt-4 w-full bg-blue-600 text-white p-2 rounded-lg hover:bg-blue-700"
              disabled={isPending}
            >
              Submit Order
            </button>
            {submissionStatus && (
              <p className="mt-2 text-center text-sm text-red-500">
                {submissionStatus.error || (submissionStatus.success && 'Order submitted successfully!')}
              </p>
            )}
          </div>
        </div>
      </div>
    </form>
  );
}