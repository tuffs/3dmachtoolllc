generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id               Int         @id @default(autoincrement())
  name             String
  modelNumber      String
  description      String?
  shortDescription String?
  slug             String
  price            Float
  quantity         Int
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  imageUrls        Json
  tags             String[]
  orderItems       OrderItem[] // Add relation to OrderItem
}

model Quotation {
  projectDescription  String
  quantity            Int
  leadTimeWeeks       Int
  material            String
  unitOfMeasurement   String
  tolerance           String
  name                String
  businessName        String
  phoneNumber         String
  emailAddress        String
  uploadedDesignFiles Json
  id                  Int      @id @default(autoincrement())
  respondedTo         Boolean  @default(false)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

model Contact {
  name        String
  email       String
  message     String
  phone       String
  id          Int      @id @default(autoincrement())
  spamScore   Int      @default(0)
  respondedTo Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Admin {
  name      String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  id        Int      @id @default(autoincrement())
}

model FloridaSalesTax {
  id        Int      @id @default(autoincrement())
  county    String
  rate      Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  zipCode   Int
}

model Customer {
  id                              Int      @id @default(autoincrement())
  email                           String   @unique
  phone                           String?
  password                        String?
  name                            String
  salesTaxExemptionCertificateURL String?  @default("")
  createdAt                       DateTime @default(now())
  updatedAt                       DateTime @updatedAt
  orders                          Order[]
}

model Order {
  id                           Int         @id @default(autoincrement())
  orderNumber                  String      @unique
  status                       String
  name                         String
  email                        String
  phone                        String
  shippingAddressOne           String
  shippingAddressTwo           String?
  shippingCity                 String
  shippingState                String
  shippingZipCode              String
  billingDifferentFromShipping Boolean     @default(false)
  billingName                  String?
  billingAddressOne            String?
  billingAddressTwo            String?
  billingCity                  String?
  billingState                 String?
  billingZipCode               String?
  customerId                   Int
  preTaxSubtotal               Float
  stateTax                     Float
  surtax                       Float
  total                        Float
  taxRate                      Float
  taxExemptionStatus           Boolean     @default(false)
  purchasedItems               Json? // Keep for backward compatibility, but prefer OrderItem
  customer                     Customer    @relation(fields: [customerId], references: [id])
  createdAt                    DateTime    @default(now())
  updatedAt                    DateTime    @updatedAt
  orderItems                   OrderItem[] // Add relation to OrderItem
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  price     Float // Store price at time of purchase
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
